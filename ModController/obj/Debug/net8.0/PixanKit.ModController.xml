<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PixanKit.ModController</name>
    </assembly>
    <members>
        <member name="T:PixanKit.ModController.Interfaces.IModVersionGetter">
            <summary>
            This interface is used to get the version list of mods
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Interfaces.IModVersionGetter.GetVersionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the list of versions of the mod.
            </summary>
            <param name="modID">The ID of the mod</param>
            <param name="token">Cancel or not</param>
            <returns>The array of files.</returns>
        </member>
        <member name="T:PixanKit.ModController.Mod.ModFile">
            <summary>
            Represents a mod file. The class helps manage the version and dependencies
            </summary>
            <remarks>
            Inits the mod file. It is not recommended to init it by yourself.
            </remarks>
        </member>
        <member name="M:PixanKit.ModController.Mod.ModFile.#ctor(System.String)">
            <summary>
            Represents a mod file. The class helps manage the version and dependencies
            </summary>
            <remarks>
            Inits the mod file. It is not recommended to init it by yourself.
            </remarks>
        </member>
        <member name="F:PixanKit.ModController.Mod.ModFile.MetaData">
            <summary>
            The meta data of the mod file. For example, the description and authors
            </summary>
        </member>
        <member name="P:PixanKit.ModController.Mod.ModFile.Owner">
            <summary>
            Retrives the owner of the mod file.
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Mod.ModFile.Version">
            <summary>
            The version of the mod file.
            </summary>
        </member>
        <member name="P:PixanKit.ModController.Mod.ModFile.FilePath">
            <summary>
            Retrieves the actual path of the file
            </summary>
        </member>
        <member name="P:PixanKit.ModController.Mod.ModFile.FileName">
            <summary>
            Retrieves the file name of the file.
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Mod.ModFile.Dependencies">
            <summary>
            The list of the ID of the dependencies
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Mod.ModFile.ReleaseDate">
            <summary>
            The release date of the mod file
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Mod.ModFile.ValidStructure">
            <summary>
            Whether the mod is a valid struture. 
            If true, load the id from the file.
            else, load the id from JSON data.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Mod.ModFile.GetDependencies(System.Collections.Generic.List{System.String})">
            <summary>
            Adds unique dependencies from the current object to the provided list.
            </summary>
            <param name="dependencies">
            A list of dependency strings to which unique dependencies will be added. 
            Existing dependencies in the list are not added again.
            </param>
            <remarks>
            This method iterates through the current object's dependencies and ensures 
            that only dependencies not already present in the input list are added. 
            It avoids duplicates in the input list.
            </remarks>
        </member>
        <member name="M:PixanKit.ModController.Mod.ModFile.Enable">
            <summary>
            The method enables the mod so that it will be activated while playing.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Mod.ModFile.Disable">
            <summary>
            Disables the mod so that it will not be activated while playing
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Mod.ModFile.ToJSON">
            <summary>
            Save the ModFile as JSON data
            </summary>
            <returns>The JSON data</returns>
        </member>
        <member name="T:PixanKit.ModController.Mod.ModMetaData">
            <summary>
            Represents metadata for a mod.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Mod.ModMetaData.#ctor">
            <summary>
            Represents metadata for a mod.
            </summary>
        </member>
        <member name="P:PixanKit.ModController.Mod.ModMetaData.Authors">
            <summary>
            Gets or sets the list of authors of the mod.
            </summary>
        </member>
        <member name="P:PixanKit.ModController.Mod.ModMetaData.ModID">
            <summary>
            Gets or sets the unique identifier of the mod.
            </summary>
        </member>
        <member name="P:PixanKit.ModController.Mod.ModMetaData.Name">
            <summary>
            Gets or sets the name of the mod.
            </summary>
        </member>
        <member name="P:PixanKit.ModController.Mod.ModMetaData.Description">
            <summary>
            Gets or sets the description of the mod.
            </summary>
        </member>
        <member name="P:PixanKit.ModController.Mod.ModMetaData.ModFiles">
            <summary>
            Gets the dictionary of mod files, where the key is the Minecraft version and the value is a list of mod files for that version.
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Mod.ModMetaData.ModFiles_Locker">
            <summary>
            The lock object for synchronizing access to <see cref="P:PixanKit.ModController.Mod.ModMetaData.ModFiles"/>.
            </summary>
        </member>
        <member name="P:PixanKit.ModController.Mod.ModMetaData.ImageCache">
            <summary>
            Gets or sets the cached path of the mod icon.
            </summary>
        </member>
        <member name="P:PixanKit.ModController.Mod.ModMetaData.ReferenceTime">
            <summary>
            Gets the total number of mod files across all versions.
            </summary>
        </member>
        <member name="P:PixanKit.ModController.Mod.ModMetaData.NewestVersions">
            <summary>
            Gets the latest version information of the mod, where the key is the Minecraft version and the value is the latest mod version number.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Mod.ModMetaData.Register(PixanKit.ModController.Mod.ModFile)">
            <summary>
            Registers a mod file under the corresponding Minecraft version.
            </summary>
            <param name="modFile">The mod file to register.</param>
            <exception cref="T:System.NullReferenceException">Thrown if the Minecraft version cannot be retrieved.</exception>
        </member>
        <member name="M:PixanKit.ModController.Mod.ModMetaData.GetUpdate(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves the latest mod version information.
            </summary>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if ModVersionGetter is null.</exception>
        </member>
        <member name="M:PixanKit.ModController.Mod.ModMetaData.ReadUpdate(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Parses and updates the latest mod version information.
            </summary>
            <param name="versions">The JSON data containing mod versions retrieved from a remote API.</param>
        </member>
        <member name="M:PixanKit.ModController.Mod.ModMetaData.ToJSON">
            <summary>
            Converts the mod metadata to JSON format.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> containing the mod metadata.</returns>
        </member>
        <member name="T:PixanKit.ModController.ModReader.FabricModParser">
            <summary>
            The config parser class for the Fabric mod files.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.ModReader.FabricModParser.ParseJson(System.String,System.String,PixanKit.ModController.Module.ModCollection,System.IO.Compression.ZipArchive)">
            <summary>
            This method parses the json config of the Fabric mod file and read the data to
            generate <see cref="T:PixanKit.ModController.Mod.ModFile"/> instance.
            </summary>
            <param name="jsonContent">The content of the json config</param>
            <param name="filepath">The path of the mod file</param>
            <param name="modCollection">The mod collection that the mod file belongs to</param>
            <param name="archive">The zip archive of the mod file</param>
            <returns>ModFile instance represents the mod file</returns>
            <exception cref="T:System.Exception">json config is not valid</exception>
        </member>
        <member name="T:PixanKit.ModController.ModReader.FMLModParser">
            <summary>
            The config parser class for the latest(1.13.x-current) Forge and NeoForge mod files.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.ModReader.FMLModParser.ParseToml(System.String,System.String,PixanKit.ModController.Module.ModCollection,System.IO.Compression.ZipArchive)">
            <summary>
            This method parses the toml config of the Forge mod file and read the data to
            generate <see cref="T:PixanKit.ModController.Mod.ModFile"/> instance.
            </summary>
            <param name="tomlContent">The content of the toml config</param>
            <param name="filepath">The path of the mod file</param>
            <param name="modCollection">The mod collection that the mod file belongs to</param>
            <param name="archive">The zip archive of the mod file</param>
            <returns>ModFile instance represents the mod file</returns>
            <exception cref="T:System.Exception">toml config is not valid</exception>
        </member>
        <member name="M:PixanKit.ModController.ModReader.FMLModParser.GetVersionFromManifest(System.IO.Compression.ZipArchiveEntry)">
            <summary>
            FUCK U
            </summary>
            <param name="manifestEntry"></param>
            <returns></returns>
        </member>
        <member name="M:PixanKit.ModController.ModReader.FMLModParser.GetDependenciesUnderJarJar(System.IO.Compression.ZipArchive)">
            <summary>
            FUCK U
            </summary>
            <param name="archive"></param>
            <returns></returns>
        </member>
        <member name="M:PixanKit.ModController.ModReader.FMLModParser.GetEachJarID(System.IO.Compression.ZipArchiveEntry)">
            <summary>
            FUCK U
            </summary>
            <param name="archiveEntry"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:PixanKit.ModController.ModReader.FOVModParser">
            <summary>
            The config parser class for the old version(1.12.x) Forge mod files.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.ModReader.FOVModParser.ParseJson(System.String,System.String,PixanKit.ModController.Module.ModCollection,System.IO.Compression.ZipArchive)">
            <summary>
            This method parses the json config of the Forge mod file and read the data to
            generate <see cref="T:PixanKit.ModController.Mod.ModFile"/> instance.
            </summary>
            <param name="jsonContent">The content of the json config</param>
            <param name="filepath">The path of the mod file</param>
            <param name="modCollection">The mod collection that the mod file belongs to</param>
            <param name="archive">The zip archive of the mod file</param>
            <returns>ModFile instance represents the mod file</returns>
            <exception cref="T:System.Exception">json config is not valid</exception>
        </member>
        <member name="T:PixanKit.ModController.ModReader.ModParserFunc">
            <summary>
            The delegate that parses the mod file from the params.
            </summary>
            <param name="filepath">The path of the file</param>
            <param name="archive">The <see cref="T:System.IO.Compression.ZipArchive"/> of the file</param>
            <param name="entry">The entry of the config</param>
            <param name="collection">The <see cref="T:PixanKit.ModController.Module.ModCollection"/> that the
            file belongs to</param>
            <returns>Returns the <see cref="T:PixanKit.ModController.Mod.ModFile"/> instance represents the file</returns>
        </member>
        <member name="T:PixanKit.ModController.ModReader.ModParser">
            <summary>
            This static class parses the mod from the mod file.
            </summary>
        </member>
        <member name="F:PixanKit.ModController.ModReader.ModParser.ModParsers">
            <summary>
            The info path and matched parsing function
            </summary>
        </member>
        <member name="M:PixanKit.ModController.ModReader.ModParser.Parse(System.String,PixanKit.ModController.Module.ModCollection)">
            <summary>
            Get the information of the mod from the file and the owner.
            </summary>
            <param name="filePath">The path of the mod file</param>
            <param name="collection">The owner of the mod</param>
            <returns>A ModFile instance which represents the mod file</returns>
        </member>
        <member name="T:PixanKit.ModController.Module.ModCollection">
            <summary>
            Represents a mod collection. This class helps control the mod under
            the mod directory.
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Module.ModCollection.Owner">
            <summary>
            The modded game of the mods
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Module.ModCollection.ModFiles">
            <summary>
            The mods under the mod directory<br/>
            <c>string</c>: The ID of the mod<br/>
            <c>ModFile</c>: The <see cref="T:PixanKit.ModController.Mod.ModFile"/> which represent mods
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Module.ModCollection.ModCache">
            <summary>
            The JSON cache of each mod. <c>key</c> is the ID
            and <c>value</c> is the JSON cache of each mod file
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Module.ModCollection.#ctor(Newtonsoft.Json.Linq.JObject,PixanKit.LaunchCore.GameModule.Game.ModdedGame)">
            <summary>
            Inits the <see cref="T:PixanKit.ModController.Module.ModCollection"/> through the cache and the 
            <see cref="F:PixanKit.ModController.Module.ModCollection.Owner"/> of the collection.
            </summary>
            <param name="cache">The Cache of the game</param>
            <param name="game"><see cref="F:PixanKit.ModController.Module.ModCollection.Owner"/> of the collection</param>
        </member>
        <member name="M:PixanKit.ModController.Module.ModCollection.#ctor(PixanKit.LaunchCore.GameModule.Game.ModdedGame)">
            <summary>
            Inits the <see cref="T:PixanKit.ModController.Module.ModCollection"/> through the 
            <see cref="F:PixanKit.ModController.Module.ModCollection.Owner"/> of the collection.<br/>
            The cache will be automatically set as <c>new JObject()</c>
            </summary>
            <param name="game"><see cref="F:PixanKit.ModController.Module.ModCollection.Owner"/> of the collection</param>
        </member>
        <member name="M:PixanKit.ModController.Module.ModCollection.GetDependencies">
            <summary>
            This method gets mandatory dependencies that are needed for existing mods
            </summary>
            <returns>The list of the mod ID</returns>
        </member>
        <member name="M:PixanKit.ModController.Module.ModCollection.CheckDependencies">
            <summary>
            This method checks if all the dependencies are satisfied
            </summary>
            <returns><c>true</c> if no other dependencies needed</returns>
        </member>
        <member name="M:PixanKit.ModController.Module.ModCollection.Register(System.String)">
            <summary>
            Register the mod with its path.
            The data of the mod will be read from its file.
            </summary>
            <param name="path">
            The path of the mod file
            </param>
        </member>
        <member name="M:PixanKit.ModController.Module.ModCollection.LoadFromJSON(Newtonsoft.Json.Linq.JObject)">
            <inheritdoc/>
        </member>
        <member name="M:PixanKit.ModController.Module.ModCollection.ToJSON">
            <inheritdoc/>
        </member>
        <member name="T:PixanKit.ModController.Module.ModModule">
            <summary>
            Represents the module responsible for managing mods within the launcher.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Module.ModModule.Init">
            <summary>
            Initializes the ModModule class and sets up event handlers for the launcher.
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Module.ModModule.Instance">
            <summary>
            Gets or sets the singleton instance of the ModModule.
            </summary>
        </member>
        <member name="P:PixanKit.ModController.Module.ModModule.IconCachePath">
            <summary>
            Gets or sets the path to the icon cache for mods.
            </summary>
        </member>
        <member name="P:PixanKit.ModController.Module.ModModule.SettingsPath">
            <summary>
            Gets or sets the path to the settings file for mods.
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Module.ModModule.ModLoaders">
            <summary>
            A list of supported mod loaders.
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Module.ModModule.ModVersionGetter">
            <summary>
            Gets or sets the mod version getter implementation.
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Module.ModModule.ModCache">
            <summary>
            A cache for storing mod-related data as a JSON object.
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Module.ModModule.ModDatas">
            <summary>
            A dictionary containing metadata for mods.
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Module.ModModule.InitTasks">
            <summary>
            A list of the tasks. Use Task.WhenAll() to wait.
            </summary>
        </member>
        <member name="F:PixanKit.ModController.Module.ModModule.ModdedGames">
            <summary>
            A dictionary containing collections of mods associated with specific modded games.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Module.ModModule.#ctor">
            <summary>
            Initializes a new instance of the ModModule class.
            Reads existing mod data and sets up collections for the launcher's games.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Module.ModModule.ReadFile">
            <summary>
            Reads the mod settings file and loads it into the cache.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Module.ModModule.DefaultFile">
            <summary>
            Save the default file to the file system.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Module.ModModule.OpenContent(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Reads the mod settings JObject and loads it into the cache.
            </summary>
            <param name="jsoncontent">The settings JObject</param>
            <exception cref="T:Newtonsoft.Json.JsonException"></exception>
        </member>
        <member name="M:PixanKit.ModController.Module.ModModule.AddMetaData(PixanKit.ModController.Mod.ModMetaData)">
            <summary>
            Adds metadata for a mod.
            </summary>
            <param name="data">The metadata to add.</param>
        </member>
        <member name="M:PixanKit.ModController.Module.ModModule.AddCollection(PixanKit.LaunchCore.GameModule.Game.ModdedGame)">
            <summary>
            Adds a collection of mods for a specific modded game.
            </summary>
            <param name="game">The modded game to associate with the mod collection.</param>
        </member>
        <member name="M:PixanKit.ModController.Module.ModModule.GetCollection(PixanKit.LaunchCore.GameModule.Game.ModdedGame)">
            <summary>
            Gets the collection of mods for a specific modded game.
            </summary>
            <param name="game">The modded game for which to retrieve the mod collection.</param>
            <returns>The mod collection associated with the game.</returns>
        </member>
        <member name="M:PixanKit.ModController.Module.ModModule.AddJudgeGame(PixanKit.LaunchCore.GameModule.Game.GameBase)">
            <summary>
            Adds a game to the mod module if it is a modded game.
            </summary>
            <param name="game">The game to evaluate and add.</param>
        </member>
        <member name="M:PixanKit.ModController.Module.ModModule.CleanMetaData">
            <summary>
            Cleans up metadata by removing entries with a reference time of 0.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Module.ModModule.SaveFile">
            <summary>
            Save the cache to the file.
            </summary>
        </member>
        <member name="M:PixanKit.ModController.Module.ModModule.LoadFromJSON(Newtonsoft.Json.Linq.JObject)">
            <inheritdoc/>
        </member>
        <member name="M:PixanKit.ModController.Module.ModModule.ToJSON">
            <inheritdoc/>
        </member>
    </members>
</doc>
